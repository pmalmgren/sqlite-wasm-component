// src/lib.rs

// Use a procedural macro to generate bindings for the world we specified in
// `host.wit`
wit_bindgen::generate!("host");

// Define a custom type and implement the generated `Host` trait for it which
// represents implementing all the necessary exported interfaces for this
// component.
struct MyHost;

impl Host for MyHost {
    fn get_person() -> example::host::db::Person {
        example::host::db::Person { name: "hello".to_string() }
    }
}


// The following macro is generated by wit-bindgen and is always named `export_{world_name}`
export_host!(MyHost);